#!/bin/bash 
#
# chkconfig: 345 95 65 
# see also /etc/sysconfig/gqrpc

NAME=gqrpc
RPC_PYSCRIPT_FILE=rpc/stats.py

# Name of the user to be used to execute the service 
SCRIPT_USER=ubuntu

# In which directory is the shell script that this service will execute 
GQ_SCRIPTS_DIR=/var/www/genequery/genequery/scripts

# Construct the command the will cd into the right directory, and invoke the script 
GQ_RUN_COMMAND="cd $GQ_SCRIPTS_DIR; bash run_rpc"

# How can the script be identified if it appears in a 'ps' command via grep? 
#  Examples to use are 'java', 'python' etc. 
GQ_PROCESS_TYPE=python

# Where to write the process identifier - this is used to track if the service is already running 
# Note: the script noted in the GQ_RUN_COMMAND must actually write this file 
PID_FILE=${GQ_SCRIPTS_DIR}/gqrpc.pid

# Load system specific optional arguments 
# Create and populate this file with machine specific settings 
if [ -f /etc/sysconfig/gqrpc ]; then 
    source /etc/sysconfig/gqrpc
fi

# Is the service already running? If so, capture the process id 
if [ -f ${PID_FILE} ]; then
    PID=`cat ${PID_FILE}`
else 
    PID="" 
fi

set_status() {
    echo ${PID}
	if [ "${PID}" != "" ]; then
	    RPC_STATUS=1		
	else
		RPC_STATIS=0
	fi	
}

start() { 
	set_status
    if [ ${RPC_STATUS} != 0 ]; then
        # Check to see if the /proc dir for this process exists 
        if [ -a /proc/${PID} ]; then 
            # check to make sure this is likely the running service 
            ps aux | grep ${PID} | grep ${GQ_PROCESS_TYPE} >> /dev/null
            # If it is a process of the right type assume that it is gqrpc and just return
            # otherwise remove the subsys lock file and start gqrpc
            if [ "$?" = "0" ]; then 
		        echo "${NAME} already started"
		        return
            else 
                echo "lock file still exists, removing..." 
                rm -f /var/lock/gqrpclock
            fi 
        else 
            # The process running as pid $PID is not a process of the right type, remove subsys 
            # lock and start daemon
            echo "lock file still exists, removing..." 
            rm -f /var/lock/gqrpclock
        fi 
    fi 
    echo -n "Starting ${NAME}"    
    su - ${GQ_SCRIPT_USER} -c "/bin/sh -c \"$GQ_RUN_COMMAND > /dev/null 2>&1\"" & RETVAL=$?
    touch /var/lock/gqrpclock
}
stop() {
    set_status
    if [ ${RPC_STATUS} != 0 ]; then
        echo -n "killing " ${PID}
        if ! kill ${PID} > /dev/null 2>&1; then
            echo
    		echo "$NAME is not running"
    		return
    	fi 
     	echo -n "Stopping ${NAME}" 
        for i in {1..30}
        do 
            if [ -n "`ps aux | grep ${GQ_PROCESS_TYPE} | grep ${RPC_PYSCRIPT_FILE}`" ]; then
                sleep 1 # Still running, wait a second. 
                echo -n . 
            else 
                # stopped 
                rm -f /var/lock/gqrpclock
                rm -f ${PID_FILE}
                echo 
		        return
            fi 
        done 
    else 
        echo "$NAME is not running." 
	    return
    fi 
    echo "Failed to stop in 30 seconds." 
    kill -QUIT ${PID} # Request a thread dump so we can diagnose a hung shutdown 
    exit 1 
}

case "$1" in 
  start) 
      start 
    ;; 
  stop) 
      stop 
    ;; 
  restart)	
	set_status
	if [ ${RPC_STATUS} == 1 ]; then
		stop
	fi
      start
    ;;
  status)
      set_status
      if [ ${RPC_STATUS} == 1 ]; then
        echo "$NAME is running"
      else
        echo "$NAME is not running"
      fi
    ;;
  *) 
    echo $"Usage: $0 {start|stop|restart|status}" 
    exit 1 
esac
